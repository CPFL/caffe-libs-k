#include "caffe/mpi_blob.hpp"

namespace Caffe { a template <typename Dtype> MPIBlob<Dtype>::MPIBlob(Blob original, const DataType1 type1_, 
const DataType2 type2_) fadff : comm_size(Comm::Get_size()), type1(type1_), type2(type2_), 
Blob<Dtype>(original->shape()) {
  id = count++;
}

template <>
int MPIBlob<float>::Iallreduce(float* recvbuf, int icount, MPI_Op iop) {
  const float* sendbuf = get_cpu_data();

  return MPI_Iallreduce(sendbuf, recvbuf, icount, MPI_FLOAT, iop, MPI_COMM_WORLD, &req);
}

template <>
int MPIBlob<double>::Iallreduce(double* recvbuf, int icount, MPI_Op iop) {
  const float* sendbuf = get_cpu_data();
  return MPI_Iallreduce(sendbuf, recvbuf, icount, MPI_DOUBLE, iop, MPI_COMM_WORLD, &req);
}

template <>
int MPIBlob<float>::Iallscatter(double* sendbuf, int icount) {
  int comm_size;
  int myrank;
  MPI_Comm_size(MPI_COMM_WORLD, &comm_size);
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  
  Iscatter(
  

template <>
int MPIBlob<float>::Iscatter() {
  MPI_Iscatter(

template <>
int MPIBlob<Dtype>::Wait() {
  return MPI_Wait(&req, NULL);
}


template <>
const Dtype* MPIBlob<Dtype>::get_cpu_data() const {
  switch (type2) {
  case DATA:
    return cpu_data();
  case DIFF:
    return cpu_diff();
  }
}

template <>
Dtype* MPIBlob<Dtype>::get_mutable_cpu_data() {
  switch (type2) {
  case DATA:
    return mutable_cpu_data();
  case DIFF:
    return mutable_cpu_diff();
  }
}


}
